<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Swift方法派发机制</title>
    <url>/2022/04/28/Swift%E6%96%B9%E6%B3%95%E6%B4%BE%E5%8F%91%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="Swift方法派发机制"><a href="#Swift方法派发机制" class="headerlink" title="Swift方法派发机制"></a>Swift方法派发机制</h2><p>方法派发机制是程序判断如何去调用函数或方法的机制，每次调用方法时都会触发，了解派发机制的工作原理，对于写出高性能的代码来说非常重要，派发机制也能解释一些Swift中的奇怪的现象，和Objective-C中的黑魔法。</p>
<span id="more"></span>

<h3 id="静态派发-vs-动态派发"><a href="#静态派发-vs-动态派发" class="headerlink" title="静态派发 vs 动态派发"></a>静态派发 vs 动态派发</h3><p>根据函数调用能否在编译时或运行时确定，可以将派发机制分成两种类型：</p>
<ul>
<li><code>静态派发</code>：在编译期的时候，编译器就知道要为某个方法调用某种实现。因此, 编译器可以执行某些优化，甚至在可能的情况下，可以将某些代码转换成inline函数，从而使整体执行速度异常快。</li>
<li><code>动态派发</code>：一定量的运行时开销为代价，提高了语言的灵活性。在动态派发机制下，对于每个方法的调用，编译器必须在方法列表(<code>witness table</code>或<code>virtial table</code>)中查找执行方法的实现，如在运行时判断选择父类的实现，还是子类的实现。由于对象的内存都是在运行时分配的，因此只能在运行时执行检查。</li>
</ul>
<p>编译型语言有通常有三种基本的函数派发方式:</p>
<ol>
<li><code>直接派发</code>（Direct Dispatch）<ul>
<li>编译后就确定了方法的调用地址（也叫<code>静态派发</code>），汇编代码中，直接跳到方法的地址执行，生成的汇编指令最少，速度最快。例如结构体中的方法</li>
<li>例如C语言，C++默认也是直接派发</li>
<li>由于缺乏动态性，无法实现多态</li>
</ul>
</li>
<li><code>函数表派发</code>（Table Dispatch）<ul>
<li>在运行时通过一个函数表查找需要执行的方法，多一次查表的过程，速度比直接派发慢</li>
<li>C++的虚函数（Virtual Table），维护一个虚函数表，对象创建的时候会保存虚表的指针，调用方法之前，从对象中取出虚表地址，根据编译时的方法偏移量从虚表取出方法的地址，跳到方法的地址执行</li>
</ul>
</li>
<li><code>消息派发</code>（Message Dispatch）<ul>
<li>Objective-C: 方法调用包装成消息，发给运行时（相当于<code>中间人</code>），运行时会找到类对象，类对象会保存类的数据信息，其中就包含方法列表（类方法在元类对象存储），或通过父类查找，直到命中执行，如果没找到方法，抛出异常，运行时提供了很多动态的方法用于改变消息派发的行为，相比函数表派发有很强的<code>动态性</code>，由于运行时支持的功能很多，方法查找的过程比较长，性能比较低</li>
</ul>
</li>
</ol>
<p>性能：直接派发 &gt; 函数表派发 &gt; 消息机制派发</p>
<p>函数表派发和消息派发属于<code>动态派发</code></p>
<p>Swift支持上面三种函数派发方式，Swift编译器会根据不同的情况选择不同的派发方式，基于性能考虑优先选择性能高的派发方式</p>
<h3 id="Swift方法派发机制-1"><a href="#Swift方法派发机制-1" class="headerlink" title="Swift方法派发机制"></a>Swift方法派发机制</h3><p>这里先只讨论纯Swift对象（非继承自NSObject），继承自OC类的比较特殊，放到后面讨论</p>
<h4 id="直接派发"><a href="#直接派发" class="headerlink" title="直接派发"></a>直接派发</h4><p>在Swift中，下面方法会被编译为直接派发，在ARM64上调用方法会被编译为<code>bl 函数地址</code></p>
<ol>
<li><p><code>全局函数</code></p>
</li>
<li><p>使用<code>static</code>声明的所有方法</p>
</li>
<li><p>使用<code>final</code>声明的所有方法，使用final声明的类里面的所有方法</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method1</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method2</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ChildClass</span>: <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">method2</span>() &#123; &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method3</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj <span class="operator">=</span> <span class="type">ChildClass</span>()</span><br><span class="line"><span class="comment">// 下面调用都是直接派发</span></span><br><span class="line">obj.method1()</span><br><span class="line">obj.method2()</span><br><span class="line">obj.method3()</span><br></pre></td></tr></table></figure></li>
<li><p>使用<code>private</code>声明的方法和属性，会隐式<code>final</code>声明</p>
</li>
<li><p><code>值类型</code>的方法，<code>struct</code>和<code>enum</code>都是值类型</p>
</li>
<li><p><code>extension</code>中没有使用<code>@objc</code>修饰的实例方法</p>
</li>
</ol>
<h4 id="函数表派发"><a href="#函数表派发" class="headerlink" title="函数表派发"></a>函数表派发</h4><p>只有引用类型才支持函数表派发，在Swift中，类的方法默认使用函数派发的方式，Swift的函数表叫<code>witness table</code>（其他语言叫<code>virtual table</code>）</p>
<ul>
<li>每个子类都有它自己的表结构</li>
<li>对于类中每个重写的方法，都有不同的函数指针</li>
<li>当子类添加新方法时，这些方法指针会添加在表数组的末尾</li>
<li>最后，编译器在运行时使用此表来查找调用函数的实现</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method1</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method2</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildClass</span>: <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">method2</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method3</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj <span class="operator">=</span> <span class="type">ChildClass</span>()</span><br><span class="line">obj.method2()</span><br></pre></td></tr></table></figure>



<p><code>obj</code>对象调用<code>method2</code>的过程</p>
<p><img src="https://blog.bombox.org/images/post/swift-table-dispatch.png" alt="img"></p>
<ul>
<li>读取对象<code>0xB00</code>的函数表.</li>
<li>读取函数指针的索引，在这里<code>method2</code>的索引是1(偏移量)，也就是<code>0xB00 + 1</code></li>
<li>跳到<code>0x222</code></li>
</ul>
<h4 id="消息派发"><a href="#消息派发" class="headerlink" title="消息派发"></a>消息派发</h4><p>Swift支持和OC混编，支持有限的runtime运行时（主要是为了和OC混编），对了纯Swift类，为了可以给OC调用，可以在方法前面加上<code>dynamic</code>来支持消息派发（注意<code>@objc</code>只是用于把方法暴露给ObjectiveC）</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">func</span> <span class="title function_">method2</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>当消息被派发时，运行时会顺着继承关系向上查找被调用的方法，为了能够提升消息派发的性能，一般都会将查找进行缓存</p>
<h4 id="协议Protocol"><a href="#协议Protocol" class="headerlink" title="协议Protocol"></a>协议Protocol</h4><p>协议所指向的对象，只有在运行时才能确定类型，Swift对于协议默认都使用<code>函数表派发</code>，协议可以为struct提供多态的支持</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Drawable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">draw</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span>: <span class="title class_">Drawable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">draw</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>: <span class="title class_">Drawable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">draw</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> drawable1: <span class="type">Drawable</span> <span class="operator">=</span> <span class="type">Line</span>()</span><br><span class="line"><span class="keyword">let</span> drawable2: <span class="type">Drawable</span> <span class="operator">=</span> <span class="type">Point</span>()</span><br><span class="line"></span><br><span class="line">drawable1.draw()        <span class="comment">// 使用函数表派发</span></span><br><span class="line">drawable1.draw()        <span class="comment">// 使用函数表派发</span></span><br></pre></td></tr></table></figure>



<h4 id="NSObject类"><a href="#NSObject类" class="headerlink" title="NSObject类"></a>NSObject类</h4><p>这里指继承自NSObject的类（包括UIView, UIButton等）</p>
<ul>
<li>对于普通的实例方法，使用函数表派发</li>
<li>对于使用<code>@objc</code>声明的方法，会暴露给ObjectiveC，还是使用函数表派发</li>
<li>对于<code>override</code>的OC方法，使用消息派发</li>
<li>对于<code>extension</code>方法，默认使用直接派发</li>
<li>使用<code>dynamic</code>修饰的方法使用消息派发</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyButton</span>: <span class="title class_">UIButton</span> &#123;</span><br><span class="line">    <span class="comment">// 直接派发</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">func</span> <span class="title function_">method1</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接派发</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">method2</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数表派发</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method3</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数表派发</span></span><br><span class="line">    <span class="keyword">@objc</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method4</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息派发派发</span></span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">dynamic</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method5</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息派发</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">layoutSubviews</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.layoutSubviews()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">MyButton</span> &#123;</span><br><span class="line">    <span class="comment">// 直接派发</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method6</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息派发</span></span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">method7</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接派发</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">func</span> <span class="title function_">method8</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift集合</category>
      </categories>
  </entry>
  <entry>
    <title>load和initialize</title>
    <url>/2022/05/01/load%E5%92%8Cinitialize/</url>
    <content><![CDATA[<p><strong>load</strong></p>
<ol>
<li><p>load方法会在runtime加载类、分类的时候调用</p>
</li>
<li><p>每个类和分类的load方法在程序运行过程中只调用一次</p>
<span id="more"></span></li>
<li><p>调用顺序</p>
<ol>
<li><p>先调用类的load方法</p>
<p>按照编译先后顺序调用(先编译，先调用)</p>
<p>调用子类的load方法之前会先调用父类的load方法(系统内部采用了递归方法，会优先把父类的load方法添加到数组中，然后再是子类本身)</p>
</li>
<li><p>再调用分类的load方法</p>
<p>按照编译先后顺序调用(先编译，后调用)</p>
</li>
</ol>
</li>
</ol>
<p>runtime运行的时候内部会直接优先调用所有类的load方法，然后再调用所有分类的load方法，而我们平时写的类方法是通过消息机制来调用方法的，所以流程通过isa找到对应的对象，然后在方法列表中对应查找；+load方法是根据方法地址直接调用的，并不是经过obj_msgSend函数调用的</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//系统会调用一个函数拿到所有类的列表，把所有类的load方法结构体存到一个数组中，把所有分类load方法结构体存到另一个数组中，runtime运行的时候就会调用加载load模块的方法，在方法内部会优先调用类的load方法，然后是分类的</span></span><br><span class="line"><span class="comment">// 存储类load方法的结构体</span></span><br><span class="line">Struct loadable_class &#123;</span><br><span class="line">  Class cls;	<span class="comment">//may be nil</span></span><br><span class="line">  IMP method;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 存储分类load方法的结构体</span></span><br><span class="line">Struct loadable_category &#123;</span><br><span class="line">  Category cat;	<span class="comment">//may be nil</span></span><br><span class="line">  IMP method;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>+initialize</strong></p>
<ol>
<li>类第一次接收到消息的时候调用</li>
<li>调用子类的+initialize会先调用父类的+initialize</li>
<li>如果子类没有实现+initialize，则会调用父类的+initialize，所以父类的+initialize有可能会被调用多次</li>
</ol>
<p><strong>作用：</strong>第一次调用这个类的时候想做一些事情可以在+initialize方法里面处理</p>
<p>在查找方法的函数里面会判断这个类有没有初始化，如果没有先执行初始化，并且内部采用递归方法，先调用父类的初始化方法，在调用自己的初始化方法，完成之后继续查找刚才那个方法</p>
<p><strong>load和initialize的区别？</strong></p>
<ol>
<li><p>load是根据函数地址直接调用的；initialize是通过objc_msgSend调用</p>
</li>
<li><p>load是runtime加载类、分类的时候调用(只会调用一次)；initialize是类第一次接收到消息的时候调用，每个类只会initialize一次(父类的+initialize可能会被多次调用)</p>
</li>
<li><p>上面总结的</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>123</tag>
      </tags>
  </entry>
</search>
